name: CI of BaselineFootstepPlanner (colcon)

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  schedule:
    - cron: '0 0 * * 0'

jobs:

  clang-format:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - name: Install clang-format-14
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install clang-format-14
      - name: Run clang-format-check
        run: |
          ./.clang-format-check.sh

  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        build-type: [Debug, RelWithDebInfo]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set ROS version
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-22.04" ]
          then
            echo "UPLOAD_DOCUMENTATION=true" >> $GITHUB_ENV
            sudo apt-get install -qq doxygen graphviz
          else
            echo "UPLOAD_DOCUMENTATION=false" >> $GITHUB_ENV
          fi
      # - name: Install ROS
      #   run: |
      #     set -e
      #     set -x
      #     sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
      #     wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
      #     sudo apt-get update -qq
      #     sudo apt-get install -qq ros-${ROS_DISTRO}-ros-base ${PYTHON_PACKAGE_PREFIX}-catkin-tools ${PYTHON_PACKAGE_PREFIX}-rosdep doxygen graphviz
      # - name: Setup catkin workspace
      #   run: |
      #     mkdir -p ${GITHUB_WORKSPACE}/catkin_ws/src/
      #     cd ${GITHUB_WORKSPACE}/catkin_ws
      #     set +x
      #     . /opt/ros/${ROS_DISTRO}/setup.bash
      #     set -x
      #     catkin init
      #     catkin build --limit-status-rate 0.1
      # - name: Checkout repository code
      #   uses: actions/checkout@v2
      #   with:
      #     submodules: recursive
      #     path: catkin_ws/src/BaselineFootstepPlanner
      # - name: Rosdep install
      #   run: |
      #     set -e
      #     set -x
      #     cd ${GITHUB_WORKSPACE}/catkin_ws
      #     set +x
      #     . devel/setup.bash
      #     set -x
      #     sudo rosdep init
      #     rosdep update
      #     rosdep install -y -r --from-paths src --ignore-src
      # - name: Catkin build
      #   run: |
      #     set -e
      #     set -x
      #     cd ${GITHUB_WORKSPACE}/catkin_ws
      #     set +x
      #     . devel/setup.bash
      #     set -x
      #     catkin build --limit-status-rate 0.1 -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DINSTALL_DOCUMENTATION=ON
      - name: Install ROS
        uses: jrl-umi3218/github-actions/install-dependencies@master
        with:
          build-type: ${{ matrix.build-type }}
          ros: |
            apt: ros-base
      - name: Check ROS Distro
        run: echo "ROS_DISTRO=$ROS_DISTRO"

      - name: Colcon build baseline_footstep_planner
        uses: jrl-umi3218/github-actions/build-colcon-project@master
        with:
          build-type: ${{ matrix.build-type }}
          cmake-args: -DOPTIMIZE_FOR_NATIVE=${{ matrix.optimize-for-native }} -DINSTALL_DOCUMENTATION=${{ env.UPLOAD_DOCUMENTATION }} -DUSE_ROS2=ON
          build-packages: baseline_footstep_planner
          test-packages: baseline_footstep_planner
      # - name: Run tests
      #   run: |
      #     set -e
      #     set -x
      #     cd ${GITHUB_WORKSPACE}/catkin_ws
      #     set +x
      #     . devel/setup.bash
      #     set -x
      #     catkin build --limit-status-rate 0.1 --catkin-make-args run_tests -- baseline_footstep_planner --no-deps
      #     catkin_test_results --verbose --all build
      - name: Upload documentation
        # Only run for one configuration and on origin master branch
        if: matrix.os == 'ubuntu-20.04' && matrix.build-type == 'RelWithDebInfo' && github.repository_owner == 'isri-aist' && github.ref == 'refs/heads/master'
        run: |
          set -e
          set -x
          cd ${GITHUB_WORKSPACE}/catkin_ws/src/BaselineFootstepPlanner
          git config --global user.name "Masaki Murooka"
          git config --global user.email "m-murooka@aist.go.jp"
          git remote set-url origin "https://mmurooka:${{ secrets.CI_TOKEN }}@github.com/isri-aist/BaselineFootstepPlanner"
          git fetch --depth=1 origin gh-pages:gh-pages
          git clean -dfx
          rm -rf cmake/
          git checkout --quiet gh-pages
          rm -rf doxygen/
          cp -r ${GITHUB_WORKSPACE}/catkin_ws/build/baseline_footstep_planner/doc/html/ doxygen
          git add doxygen
          git_status=`git status -s`
          if test -n "$git_status"; then
            git commit --quiet -m "Update Doxygen HTML files from commit ${{ github.sha }}"
            git push origin gh-pages
          else
            echo "Github pages documentation is already up-to-date."
          fi
